# generated by datamodel-codegen:
#   filename:  s2-over-ip-pairing.yaml
#   timestamp: 2025-04-15T14:41:29+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional
from uuid import UUID

from pydantic import AnyUrl, AwareDatetime, BaseModel, RootModel, constr


class Protocols(Enum):
    WebSocketSecure = 'WebSocketSecure'


class S2Role(Enum):
    CEM = 'CEM'
    RM = 'RM'


class Deployment(Enum):
    WAN = 'WAN'
    LAN = 'LAN'


class PairingToken(RootModel[constr(pattern=r'^[0-9a-zA-Z]{32}$')]):
    root: constr(pattern=r'^[0-9a-zA-Z]{32}$')


class PairingInfo(BaseModel):
    pairingUri: Optional[AnyUrl] = None
    token: Optional[PairingToken] = None
    validUntil: Optional[AwareDatetime] = None


class ConnectionRequest(BaseModel):
    s2ClientNodeId: Optional[UUID] = None
    supportedProtocols: Optional[List[Protocols]] = None


class ConnectionDetails(BaseModel):
    selectedProtocol: Optional[Protocols] = None
    challenge: Optional[str] = None
    connectionUri: Optional[AnyUrl] = None


class S2NodeDescription(BaseModel):
    brand: Optional[str] = None
    logoUri: Optional[AnyUrl] = None
    type: Optional[str] = None
    modelName: Optional[str] = None
    userDefinedName: Optional[str] = None
    role: Optional[S2Role] = None
    deployment: Optional[Deployment] = None


class PairingRequest(BaseModel):
    token: Optional[PairingToken] = None
    publicKey: Optional[str] = None
    s2ClientNodeId: Optional[UUID] = None
    s2ClientNodeDescription: Optional[S2NodeDescription] = None
    supportedProtocols: Optional[List[Protocols]] = None


class PairingResponse(BaseModel):
    s2ServerNodeId: Optional[UUID] = None
    serverNodeDescription: Optional[S2NodeDescription] = None
    requestConnectionUri: Optional[AnyUrl] = None
